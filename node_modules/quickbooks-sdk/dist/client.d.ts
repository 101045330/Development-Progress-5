import { QBOSaleItem, QBOService, QBOCustomer, QBOInvoice, QBOBatchItemRequest, QBOBatchItemResponse, QBOTerms } from './models';
declare class QBOClient {
    private sandboxUrl;
    private productionUrl;
    private baseUrl;
    private clientId;
    private clientSecret;
    private companyId;
    private accessToken;
    private refreshToken;
    private environment;
    private minorversion;
    private onRefreshListener;
    constructor(clientId: string, clientSecret: string, companyId: string, sandbox?: boolean);
    setAccessToken(token: string, refreshToken?: string): void;
    getAccessToken(): string;
    getEnvironment(): string;
    getCompanyId(): string;
    setOnRefreshToken(listener: (token: string, refreshToken: string) => void): void;
    private getRefreshToken;
    private endPoint;
    /**
     * Sends a request to QuickBooks Server.
     * This method checks for the response. If it responds with 401,
     * then tries to refresh the Access Token and the retries the request.
     */
    private sendRequest;
    /**
     * Creates a new Invoice in QBO.
     * @link https://developer.intuit.com/docs/api/accounting/invoice
     * @param customerId
     * @param items
     * @param extra
     */
    createInvoice(customerId: number, items: QBOSaleItem[], extra?: any): Promise<QBOInvoice>;
    /**
     * Retrieves the full list of Customers from QuickBooks API.
     * @link https://developer.intuit.com/docs/api/accounting/customer
     */
    getAllCustomers(): Promise<QBOCustomer[]>;
    /**
     * Retrieves the list of Customers that are marked as 'active' from QuickBooks API.
     * @link https://developer.intuit.com/docs/api/accounting/customer
     */
    getActiveCustomers(): Promise<QBOCustomer[]>;
    /**
     * Retrieves the list of Customers that are marked as 'archived' from QuickBooks API.
     * @link https://developer.intuit.com/docs/api/accounting/customer
     */
    getArchivedCustomers(): Promise<QBOCustomer[]>;
    /**
     * Retrieves a Customer by name from QuickBooks API.
     * @link https://developer.intuit.com/docs/api/accounting/customer
     */
    getCustomer(name: string): Promise<QBOCustomer>;
    getCustomerById(customerId: number): Promise<QBOCustomer>;
    /**
     * Gets a company's hierarchy based on parent/children relationship between them.
     * @todo parent/children relationship is hardcoded for Allen & Co
     */
    getCustomerHierarchy(name: string): Promise<QBOCustomer>;
    /**
     * Gets a service given its id.
     * @param serviceId
     */
    getServiceItemById(serviceId: number): Promise<QBOService | null>;
    /**
     * Get a list of items whose parent category is the specified.
     * Useful for finding the developer's service which share a common parent category.
     * @param categoryId
     */
    getServicesByCategory(categoryId: number): Promise<QBOService[]>;
    /**
     * Retrieves a Service by SKU from QuickBooks API.
     * @link https://developer.intuit.com/docs/api/accounting/item
     */
    getServiceBySKU(sku: string): Promise<QBOService | null>;
    /**
     * Get the last invoice created for a Customer.
     * @param clientId
     */
    getLastClientInvoice(clientId: number): Promise<QBOInvoice | null>;
    getCustomerInvoices(clientId: number, startDate?: string, endDate?: string): Promise<QBOInvoice[]>;
    batchQueries(requests: QBOBatchItemRequest[]): Promise<QBOBatchItemResponse[]>;
    /**
     * Retrieves the list of Terms for the Invoices.
     * @link https://developer.intuit.com/docs/api/accounting/term
     */
    getTerms(): Promise<QBOTerms[]>;
    /**
     * Retrieves the report of Profit and Loss.
     * @link https://developer.intuit.com/docs/api/accounting/profit-and-loss-detail
     * @param startDate
     * @param endDate
     */
    getProfitAndLoss(startDate: string, endDate: string): Promise<any>;
}
export { QBOClient };
