"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class QBOItemRef {
    constructor(props) {
        this.value = "";
        this.name = "";
        if (props.value) {
            this.value = props.value;
        }
        if (props.name) {
            this.name = props.name;
        }
    }
}
exports.QBOItemRef = QBOItemRef;
/**
 * Line Item to populate the Invoice object.
 * @link https://developer.intuit.com/docs/api/accounting/invoice
 */
class QBOSaleItem {
    constructor() {
        this.amount = 0;
        this.serviceId = 0;
        this.description = "";
        this.unitPrice = 0;
        this.quantity = 0;
        this.itemRef = null;
        this.sku = "";
        this.shortDescription = "";
        this.fullDescription = "";
    }
    getPayload() {
        return {
            "Amount": this.amount,
            "DetailType": "SalesItemLineDetail",
            "SalesItemLineDetail": {
                "ItemRef": this.itemRef,
                "UnitPrice": this.unitPrice,
                "Qty": this.quantity
            },
            "Description": this.description
        };
    }
}
exports.QBOSaleItem = QBOSaleItem;
/**
 * Invoice Service Item.
 */
class QBOService {
    constructor(props) {
        this.fullyQualifiedName = "";
        this.itemRef = null;
        this.type = "";
        this.sku = "";
        this.description = "";
        this.id = parseInt(props.Id);
        this.name = props.Name;
        if (props.FullyQualifiedName) {
            this.fullyQualifiedName = props.FullyQualifiedName;
        }
        if (props.Type) {
            this.type = props.Type;
        }
        if (props.IncomeAccountRef) {
            this.itemRef = new QBOItemRef(props.IncomeAccountRef);
        }
        if (props.Sku) {
            this.sku = props.Sku;
        }
        if (props.Description) {
            this.description = props.Description;
        }
    }
}
exports.QBOService = QBOService;
/**
 * Customer Object.
 */
class QBOCustomer {
    constructor(props) {
        this.displayName = "";
        this.fullyQualifiedName = "";
        this.companyName = "";
        this.childrenCustomers = [];
        this.parentCustomer = null;
        this.companyCount = 1;
        this.parentId = 0;
        this.salesTerm = null;
        this.id = parseInt(props.Id);
        if (props.DisplayName) {
            this.displayName = props.DisplayName;
        }
        if (props.FullyQualifiedName) {
            this.fullyQualifiedName = props.FullyQualifiedName;
        }
        if (props.CompanyName) {
            this.companyName = props.CompanyName;
        }
        if (props.ParentRef) {
            this.parentId = parseInt(props.ParentRef.value);
        }
        if (props.SalesTermRef) {
            this.salesTerm = new QBOItemRef(props.SalesTermRef);
        }
    }
    getCompanyPrefix() {
        const index = this.fullyQualifiedName.indexOf(':');
        if (index === -1) {
            return this.fullyQualifiedName;
        }
        else {
            return this.fullyQualifiedName.substring(0, index).trim();
        }
    }
}
exports.QBOCustomer = QBOCustomer;
/**
 * Invoice Item.
 */
class QBOInvoiceItem {
    constructor(props = {}) {
        this.id = 0;
        this.description = "";
        this.service = "";
        this.serviceId = 0;
        this.amount = 0;
        this.unitPrice = 0;
        this.quantity = 0;
        if (props.Id !== undefined) {
            this.id = parseInt(props.Id);
        }
        if (props.Description !== undefined) {
            this.description = props.Description;
        }
        if (props.Amount !== undefined) {
            this.amount = parseFloat(props.Amount);
        }
        if (props.SalesItemLineDetail !== undefined) {
            this.serviceId = parseInt(props.SalesItemLineDetail.ItemRef.value);
            this.service = props.SalesItemLineDetail.ItemRef.name;
            this.unitPrice = parseFloat(props.SalesItemLineDetail.UnitPrice);
            this.quantity = parseFloat(props.SalesItemLineDetail.Qty);
        }
    }
}
exports.QBOInvoiceItem = QBOInvoiceItem;
/**
 * Invoice Object.
 */
class QBOInvoice {
    constructor(props = {}) {
        this.id = 0;
        this.deposit = 0;
        this.domain = "";
        this.items = [];
        this.syncToken = "";
        this.docNumber = 0;
        this.totalAmount = 0;
        this.balance = 0;
        this.memo = "";
        this.txnDate = "";
        this.dueDate = "";
        this.date = "";
        this.salesTermRef = 0;
        if (props["Id"] !== undefined) {
            this.id = parseInt(props["Id"]);
        }
        if (props["Deposit"] !== undefined) {
            this.deposit = parseFloat(props["Deposit"]);
        }
        if (props["SyncToken"] !== undefined) {
            this.syncToken = props["SyncToken"];
        }
        if (props["DocNumber"] !== undefined) {
            this.docNumber = parseInt(props["DocNumber"]);
        }
        if (props["TotalAmt"] !== undefined) {
            this.totalAmount = parseFloat(props["TotalAmt"]);
        }
        if (props["Balance"] !== undefined) {
            this.balance = parseFloat(props["Balance"]);
        }
        if (props["CustomerMemo"] && props["CustomerMemo"]["value"]) {
            this.memo = props["CustomerMemo"]["value"];
        }
        if (props["TxnDate"] !== undefined) {
            this.date = props["TxnDate"];
            this.txnDate = props["TxnDate"];
        }
        if (props["DueDate"] !== undefined) {
            this.dueDate = props["DueDate"];
        }
        if (props["Line"] !== undefined) {
            this.items = props["Line"].map((line) => {
                return new QBOInvoiceItem(line);
            });
        }
        if (props["SalesTermRef"] !== undefined) {
            this.salesTermRef = parseInt(props["SalesTermRef"]["value"]);
        }
    }
}
exports.QBOInvoice = QBOInvoice;
class QBOInvoiceInput {
    constructor() {
        this.customer = null;
        this.services = [];
        this.lastCustomerInvoice = null;
        this.nextInvoiceNumber = 0;
    }
}
exports.QBOInvoiceInput = QBOInvoiceInput;
/**
 * Batch Item Request. Used to do multiple queries in a single operation.
 */
class QBOBatchItemRequest {
    constructor(props = {}) {
        this.bid = "";
        this.query = "";
        if (props.bid !== undefined) {
            this.bid = props.bid;
        }
        if (props.query !== undefined) {
            this.query = props.query;
        }
    }
    payload() {
        return {
            "bId": this.bid,
            "Query": this.query
        };
    }
}
exports.QBOBatchItemRequest = QBOBatchItemRequest;
/**
 * Batch Item Response.
 */
class QBOBatchItemResponse {
    constructor(props = {}) {
        this.bid = "";
        this.data = {};
        if (props.bId !== undefined) {
            this.bid = props.bId;
        }
        if (props.QueryResponse !== undefined) {
            this.data = props.QueryResponse;
        }
    }
}
exports.QBOBatchItemResponse = QBOBatchItemResponse;
class QBOTerms {
    constructor(props = {}) {
        this.id = 0;
        this.name = "";
        this.type = "";
        this.dueDays = 0;
        if (props.Id !== undefined) {
            this.id = parseInt(props.Id);
        }
        if (props.Name !== undefined) {
            this.name = props.Name;
        }
        if (props.Type !== undefined) {
            this.type = props.Type;
        }
        if (props.DueDays !== undefined) {
            this.dueDays = parseInt(props.DueDays);
        }
    }
}
exports.QBOTerms = QBOTerms;
