declare class QBOItemRef {
    value: string;
    name: string;
    constructor(props: any);
}
/**
 * Line Item to populate the Invoice object.
 * @link https://developer.intuit.com/docs/api/accounting/invoice
 */
declare class QBOSaleItem {
    amount: number;
    serviceId: number;
    description: string;
    unitPrice: number;
    quantity: number;
    itemRef: QBOItemRef | null;
    sku: string;
    shortDescription: string;
    fullDescription: string;
    getPayload(): any;
}
/**
 * Invoice Service Item.
 */
declare class QBOService {
    id: number;
    name: string;
    fullyQualifiedName: string;
    itemRef: QBOItemRef | null;
    type: string;
    sku: string;
    description: string;
    constructor(props: any);
}
/**
 * Customer Object.
 */
declare class QBOCustomer {
    id: number;
    displayName: string;
    fullyQualifiedName: string;
    companyName: string;
    childrenCustomers: QBOCustomer[];
    parentCustomer: QBOCustomer | null;
    companyCount: number;
    parentId: number;
    salesTerm: QBOItemRef | null;
    constructor(props: any);
    getCompanyPrefix(): string;
}
/**
 * Invoice Item.
 */
declare class QBOInvoiceItem {
    id: number;
    description: string;
    service: string;
    serviceId: number;
    amount: number;
    unitPrice: number;
    quantity: number;
    constructor(props?: any);
}
/**
 * Invoice Object.
 */
declare class QBOInvoice {
    id: number;
    deposit: number;
    domain: string;
    items: string[];
    syncToken: string;
    docNumber: number;
    totalAmount: number;
    balance: number;
    memo: string;
    txnDate: string;
    dueDate: String;
    date: string;
    salesTermRef: number;
    constructor(props?: any);
}
declare class QBOInvoiceInput {
    customer: QBOCustomer | null;
    services: QBOService[];
    lastCustomerInvoice: QBOInvoice | null;
    nextInvoiceNumber: number;
}
/**
 * Batch Item Request. Used to do multiple queries in a single operation.
 */
declare class QBOBatchItemRequest {
    bid: string;
    query: string;
    constructor(props?: any);
    payload(): any;
}
/**
 * Batch Item Response.
 */
declare class QBOBatchItemResponse {
    bid: string;
    data: any;
    constructor(props?: any);
}
declare class QBOTerms {
    id: number;
    name: string;
    type: string;
    dueDays: number;
    constructor(props?: any);
}
interface QBOError extends Error {
    response: any;
}
export { QBOInvoice, QBOSaleItem, QBOService, QBOItemRef, QBOInvoiceItem, QBOInvoiceInput, QBOTerms };
export { QBOCustomer };
export { QBOBatchItemRequest, QBOBatchItemResponse };
export { QBOError };
